{
  "stats": {
    "suites": 4,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-06T02:02:12.108Z",
    "end": "2022-01-06T02:02:15.685Z",
    "duration": 3577,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bdf93d4a-e073-40f1-915b-ef8b73875e3f",
      "title": "",
      "fullFile": "cypress/integration/Users/GETusers.js",
      "file": "cypress/integration/Users/GETusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "28688d82-292d-490b-82e9-80e99acc1b2c",
          "title": "Given the Users api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be582070-92f4-4651-84ea-2a4871d97349",
              "title": "When I Send Get /users",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return a list with 20 registered users",
                  "fullTitle": "Given the Users api When I Send Get /users Then it should return a list with 20 registered users",
                  "timedOut": null,
                  "duration": 2423,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'https://gorest.co.in/public/v1/users/',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(200);\n  expect(res.body.meta.pagination.limit).to.eq(res.body.data.length);\n  Cypress._.each(res.body.data, users => {\n    expect(users).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(users.id).to.be.a('number').and.not.be.null;\n    expect(users.email).to.not.be.null;\n    expect(users.gender).to.not.be.null;\n    expect(users.status).to.not.be.null;\n  });\n  var usuario = res.body.data[0];\n  cy.savingGetUser(usuario.id, usuario.name, usuario.email, usuario.gender, usuario.status); //expect(res.body.data[0].email).to.not.be.null;\n});",
                  "err": {},
                  "uuid": "9f35d847-d769-4b82-a030-6d71b8168b87",
                  "parentUUID": "be582070-92f4-4651-84ea-2a4871d97349",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f35d847-d769-4b82-a030-6d71b8168b87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2423,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "becd9d6a-e79f-46d3-9356-70b06784bf83",
              "title": "When i send GET /users passing user id as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return only the filtered user",
                  "fullTitle": "Given the Users api When i send GET /users passing user id as an URL param Then it should return only the filtered user",
                  "timedOut": null,
                  "duration": 475,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {};\ncy.readFile('cypress/fixtures/GetUser/randomUserFromGET.json').then(User => {\n  user = User;\n  cy.request({\n    method: 'GET',\n    url: 'https://gorest.co.in/public/v1/users/' + user.id,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.eq(200);\n    cy.log(JSON.stringify(res.body));\n    expect(res.body.data).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(res.body.data).has.property('id', user.id);\n    expect(res.body.data).has.property('name', user.name);\n    expect(res.body.data).has.property('gender', user.gender);\n    expect(res.body.data).has.property('email', user.email);\n    expect(res.body.data).has.property('status', user.status);\n  });\n});",
                  "err": {},
                  "uuid": "c140356f-3da6-4236-a39e-081f5cb525da",
                  "parentUUID": "becd9d6a-e79f-46d3-9356-70b06784bf83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c140356f-3da6-4236-a39e-081f5cb525da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 475,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58f645c7-1aba-4691-b81b-36d9571f07ed",
              "title": "When i send GET /user passing an userid that doesnt exists as an URL Param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given the Users api When i send GET /user passing an userid that doesnt exists as an URL Param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 391,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'get',\n  url: 'https://gorest.co.in/public/v1/users/0000',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "d5b0ba30-d661-4460-aceb-6788728de261",
                  "parentUUID": "58f645c7-1aba-4691-b81b-36d9571f07ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5b0ba30-d661-4460-aceb-6788728de261"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 391,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.0.1"
    }
  }
}