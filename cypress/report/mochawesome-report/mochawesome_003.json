{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-05T02:38:03.080Z",
    "end": "2022-01-05T02:38:08.387Z",
    "duration": 5307,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4ce0169-7626-45aa-96b1-18e59773a034",
      "title": "",
      "fullFile": "cypress/integration/Users/UPDATEuser.js",
      "file": "cypress/integration/Users/UPDATEuser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "800ed5f9-a6cd-440b-b56b-3d0d215f8dff",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "69b0aae3-f2a6-4ea4-8a2e-66e617d26cd6",
              "title": "When I already have an user and want to update it all",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "fullTitle": "Given User API When I already have an user and want to update it all Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "timedOut": null,
                  "duration": 1633,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.AllUser.name);\n  expect(response.body.data.gender).to.eq(newUser.AllUser.gender);\n  expect(response.body.data.email).to.eq(newUser.AllUser.email);\n  expect(response.body.data.status).to.eq(newUser.AllUser.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "f07ad186-7a64-4e24-a4fd-2dcdd7af6de8",
                  "parentUUID": "69b0aae3-f2a6-4ea4-8a2e-66e617d26cd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f07ad186-7a64-4e24-a4fd-2dcdd7af6de8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1633,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
              "title": "When i want to change only one thing from user",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return the user with only one change - Name",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Name",
                  "timedOut": null,
                  "duration": 408,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.name\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.name.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "069f7d64-595b-4a65-a912-d4ff0535c78f",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Gender",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Gender",
                  "timedOut": null,
                  "duration": 404,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.gender\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(newUser.gender.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "d5c180cd-f836-4b52-abb7-aa9f8a642e2c",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Email",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Email",
                  "timedOut": null,
                  "duration": 409,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.email\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(newUser.email.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "db141bfc-3677-4042-ac00-6871bf3ba71c",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Status",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Status",
                  "timedOut": null,
                  "duration": 418,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.status\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(newUser.status.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "610ceb3f-5634-4193-b304-db53df55eb7c",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "069f7d64-595b-4a65-a912-d4ff0535c78f",
                "d5c180cd-f836-4b52-abb7-aa9f8a642e2c",
                "db141bfc-3677-4042-ac00-6871bf3ba71c",
                "610ceb3f-5634-4193-b304-db53df55eb7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1639,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b54a791-73aa-4cad-91a7-271ea51f04a4",
              "title": "When i send only null values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error informing that all fields i sent could not me null",
                  "fullTitle": "Given User API When i send only null values Then it should return me an error informing that all fields i sent could not me null",
                  "timedOut": null,
                  "duration": 399,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "8f644937-a02b-4b22-aff1-3881b7f611b3",
                  "parentUUID": "8b54a791-73aa-4cad-91a7-271ea51f04a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f644937-a02b-4b22-aff1-3881b7f611b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 399,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
              "title": "When i sent null values in each field",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "timedOut": null,
                  "duration": 393,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullName,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n});",
                  "err": {},
                  "uuid": "713bbd0a-6518-4053-8c96-4b290c47b9ff",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "timedOut": null,
                  "duration": 396,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullEmail,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n});",
                  "err": {},
                  "uuid": "6f27da60-e3e0-456b-aa8c-a72592482c29",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 389,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullGender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"gender\");\n});",
                  "err": {},
                  "uuid": "e0a5761d-b999-48d8-9eac-f50078995466",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 387,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullStatus,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "f555c3c5-e2e7-48c5-8c63-54345cccbc4c",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "713bbd0a-6518-4053-8c96-4b290c47b9ff",
                "6f27da60-e3e0-456b-aa8c-a72592482c29",
                "e0a5761d-b999-48d8-9eac-f50078995466",
                "f555c3c5-e2e7-48c5-8c63-54345cccbc4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1565,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.0.1"
    }
  }
}