{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-06T02:02:34.958Z",
    "end": "2022-01-06T02:02:42.619Z",
    "duration": 7661,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "da5b6f61-e725-4927-b4de-ce77d6272ed1",
      "title": "",
      "fullFile": "cypress/integration/Users/UPDATEuser.js",
      "file": "cypress/integration/Users/UPDATEuser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "644d3960-f1ef-4e36-85bb-49f3cce02ecb",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "80e3babc-dcbc-4fa9-90ec-0ff9f55b4c29",
              "title": "When I already have an user and want to update it all",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "fullTitle": "Given User API When I already have an user and want to update it all Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "timedOut": null,
                  "duration": 2552,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.AllUser.name);\n  expect(response.body.data.gender).to.eq(newUser.AllUser.gender);\n  expect(response.body.data.email).to.eq(newUser.AllUser.email);\n  expect(response.body.data.status).to.eq(newUser.AllUser.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "7d21c9fa-ba00-4f43-a189-896386dda27a",
                  "parentUUID": "80e3babc-dcbc-4fa9-90ec-0ff9f55b4c29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d21c9fa-ba00-4f43-a189-896386dda27a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2552,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
              "title": "When i want to change only one thing from user",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return the user with only one change - Name",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Name",
                  "timedOut": null,
                  "duration": 540,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.name\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.name.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "b932648e-8d6c-46c3-9115-70915e6924e4",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Gender",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Gender",
                  "timedOut": null,
                  "duration": 513,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.gender\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(newUser.gender.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "000359ec-0467-4d6b-8583-6a3c8379e6be",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Email",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Email",
                  "timedOut": null,
                  "duration": 505,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.email\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(newUser.email.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "be716006-f337-4ba4-9101-56b9c1ad0ee3",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Status",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Status",
                  "timedOut": null,
                  "duration": 621,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.status\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(newUser.status.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "50047780-186d-4810-86cc-d81d42754f31",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b932648e-8d6c-46c3-9115-70915e6924e4",
                "000359ec-0467-4d6b-8583-6a3c8379e6be",
                "be716006-f337-4ba4-9101-56b9c1ad0ee3",
                "50047780-186d-4810-86cc-d81d42754f31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2179,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d05cfcce-4d98-4e6d-8e83-efc2fd246d2b",
              "title": "When i send only null values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error informing that all fields i sent could not me null",
                  "fullTitle": "Given User API When i send only null values Then it should return me an error informing that all fields i sent could not me null",
                  "timedOut": null,
                  "duration": 567,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "cc6f6674-ac0b-42fc-86a4-d666e7ac9cde",
                  "parentUUID": "d05cfcce-4d98-4e6d-8e83-efc2fd246d2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc6f6674-ac0b-42fc-86a4-d666e7ac9cde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 567,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2130d549-e47e-453d-99ae-c9a5657c75c1",
              "title": "When i sent null values in each field",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "timedOut": null,
                  "duration": 481,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullName,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n});",
                  "err": {},
                  "uuid": "6a447bc1-e1a7-4fae-aa63-fc2e64b4ca0f",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "timedOut": null,
                  "duration": 425,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullEmail,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n});",
                  "err": {},
                  "uuid": "287083da-0065-49e3-9e9c-b6e450a03a89",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 446,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullGender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"gender\");\n});",
                  "err": {},
                  "uuid": "157189d6-7b16-4dad-9034-960b19f596a1",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 418,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullStatus,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "b9075391-291e-47d7-b9d4-95e95bc2e32c",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a447bc1-e1a7-4fae-aa63-fc2e64b4ca0f",
                "287083da-0065-49e3-9e9c-b6e450a03a89",
                "157189d6-7b16-4dad-9034-960b19f596a1",
                "b9075391-291e-47d7-b9d4-95e95bc2e32c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1770,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.0.1"
    }
  }
}