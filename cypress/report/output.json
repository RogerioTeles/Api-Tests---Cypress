{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-05T02:37:39.887Z",
    "end": "2022-01-05T02:38:08.387Z",
    "duration": 13607,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eca9d37f-1015-41fd-b760-f8c54959e598",
      "title": "",
      "fullFile": "cypress/integration/Users/GETusers.js",
      "file": "cypress/integration/Users/GETusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "69abd0bf-fb03-4b1e-8b69-d3f8a61b1790",
          "title": "Given the Users api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c5c672d2-9276-4db1-9d2e-228b9d6de200",
              "title": "When I Send Get /users",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return a list with 20 registered users",
                  "fullTitle": "Given the Users api When I Send Get /users Then it should return a list with 20 registered users",
                  "timedOut": null,
                  "duration": 1173,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'https://gorest.co.in/public/v1/users/',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(200);\n  expect(res.body.meta.pagination.limit).to.eq(res.body.data.length);\n  Cypress._.each(res.body.data, users => {\n    expect(users).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(users.id).to.be.a('number').and.not.be.null;\n    expect(users.email).to.not.be.null;\n    expect(users.gender).to.not.be.null;\n    expect(users.status).to.not.be.null;\n  });\n  var usuario = res.body.data[0];\n  cy.savingGetUser(usuario.id, usuario.name, usuario.email, usuario.gender, usuario.status); //expect(res.body.data[0].email).to.not.be.null;\n});",
                  "err": {},
                  "uuid": "3b91378c-9e0d-44b7-814e-8ebded8d3c24",
                  "parentUUID": "c5c672d2-9276-4db1-9d2e-228b9d6de200",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b91378c-9e0d-44b7-814e-8ebded8d3c24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ac07ef2-52ee-49f8-b934-ff43a3dd2b85",
              "title": "When i send GET /users passing user id as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return only the filtered user",
                  "fullTitle": "Given the Users api When i send GET /users passing user id as an URL param Then it should return only the filtered user",
                  "timedOut": null,
                  "duration": 366,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {};\ncy.readFile('cypress/fixtures/GetUser/randomUserFromGET.json').then(User => {\n  user = User;\n  cy.request({\n    method: 'GET',\n    url: 'https://gorest.co.in/public/v1/users/' + user.id,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.eq(200);\n    cy.log(JSON.stringify(res.body));\n    expect(res.body.data).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(res.body.data).has.property('id', user.id);\n    expect(res.body.data).has.property('name', user.name);\n    expect(res.body.data).has.property('gender', user.gender);\n    expect(res.body.data).has.property('email', user.email);\n    expect(res.body.data).has.property('status', user.status);\n  });\n});",
                  "err": {},
                  "uuid": "b9089223-3acb-48a1-b776-abd1ea4bbca2",
                  "parentUUID": "8ac07ef2-52ee-49f8-b934-ff43a3dd2b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9089223-3acb-48a1-b776-abd1ea4bbca2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 366,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7d5edac-d960-4c90-8ce8-503f0e4b4f32",
              "title": "When i send GET /user passing an userid that doesnt exists as an URL Param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given the Users api When i send GET /user passing an userid that doesnt exists as an URL Param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 325,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'get',\n  url: 'https://gorest.co.in/public/v1/users/0000',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "f26441c4-2167-4c07-a223-575858fc94b2",
                  "parentUUID": "f7d5edac-d960-4c90-8ce8-503f0e4b4f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f26441c4-2167-4c07-a223-575858fc94b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 325,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ae45aace-f2f0-4366-b650-8206ee01c684",
      "title": "",
      "fullFile": "cypress/integration/Users/POSTusers.js",
      "file": "cypress/integration/Users/POSTusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "894a4ec5-cffa-47ea-95e1-d61b6a49bc8d",
          "title": "Given the User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f3bbc3b0-9603-47c1-a50c-9d434004a061",
              "title": "When I send POST /User with all fields ",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should create a new user",
                  "fullTitle": "Given the User API When I send POST /User with all fields  Then it should create a new user",
                  "timedOut": null,
                  "duration": 1288,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(201);\n  expect(response.body.data).has.property('name', user.AllUser.name);\n  expect(response.body.data).has.property('gender', user.AllUser.gender);\n  expect(response.body.data).has.property('email', user.AllUser.email);\n  expect(response.body.data).has.property('status', user.AllUser.status);\n  userId = response.body.data.id;\n});",
                  "err": {},
                  "uuid": "62ab5282-cd47-47bb-bc58-3e210720c637",
                  "parentUUID": "f3bbc3b0-9603-47c1-a50c-9d434004a061",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62ab5282-cd47-47bb-bc58-3e210720c637"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1288,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72e30bf4-0c54-4476-b5c2-107319e40270",
              "title": "When I send POST /User sending only one field ",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "(Name) - Then it should return a message informing that EMAIL, GENDER AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Name) - Then it should return a message informing that EMAIL, GENDER AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 344,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.name,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"gender\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "604ce56c-da9a-4234-a561-6fb11b412e9b",
                  "parentUUID": "72e30bf4-0c54-4476-b5c2-107319e40270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Email) - Then it should return a message informing that NAME, GENDER AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Email) - Then it should return a message informing that NAME, GENDER AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 334,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.email,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"gender\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "19d022a4-bff7-45e0-870e-c1e195083de9",
                  "parentUUID": "72e30bf4-0c54-4476-b5c2-107319e40270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Gender) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Gender) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 328,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.gender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "82e78555-4408-46c8-a17d-fadf87831865",
                  "parentUUID": "72e30bf4-0c54-4476-b5c2-107319e40270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Status) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Status) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 332,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.status,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "af2c2ffe-0ed3-40bf-ae0c-65f3d9b4c39c",
                  "parentUUID": "72e30bf4-0c54-4476-b5c2-107319e40270",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "604ce56c-da9a-4234-a561-6fb11b412e9b",
                "19d022a4-bff7-45e0-870e-c1e195083de9",
                "82e78555-4408-46c8-a17d-fadf87831865",
                "af2c2ffe-0ed3-40bf-ae0c-65f3d9b4c39c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1338,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c2dedd33-3a61-4510-8313-192c581760eb",
              "title": "When I send POST /User with null fields",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error 422 informing that each field must be not null",
                  "fullTitle": "Given the User API When I send POST /User with null fields Then it should return me an error 422 informing that each field must be not null",
                  "timedOut": null,
                  "duration": 345,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "3431babd-65f8-4b9f-a9a9-4e7d0cbdee9f",
                  "parentUUID": "c2dedd33-3a61-4510-8313-192c581760eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3431babd-65f8-4b9f-a9a9-4e7d0cbdee9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "641a62a5-f46c-49a7-ba5b-80be4959e5c9",
              "title": "When I send POST /User without accessToken",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an auth error",
                  "fullTitle": "Given the User API When I send POST /User without accessToken Then it should return an auth error",
                  "timedOut": null,
                  "duration": 316,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ',\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: {},\n  //Preciso declarar isso para que não pare o teste caso dê erro\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(401);\n  expect(response.body.data.message).to.eq('Authentication failed');\n});",
                  "err": {},
                  "uuid": "cd062e59-f980-4e95-b208-efb67daec46b",
                  "parentUUID": "641a62a5-f46c-49a7-ba5b-80be4959e5c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd062e59-f980-4e95-b208-efb67daec46b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 316,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b4ce0169-7626-45aa-96b1-18e59773a034",
      "title": "",
      "fullFile": "cypress/integration/Users/UPDATEuser.js",
      "file": "cypress/integration/Users/UPDATEuser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "800ed5f9-a6cd-440b-b56b-3d0d215f8dff",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "69b0aae3-f2a6-4ea4-8a2e-66e617d26cd6",
              "title": "When I already have an user and want to update it all",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "fullTitle": "Given User API When I already have an user and want to update it all Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "timedOut": null,
                  "duration": 1633,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.AllUser.name);\n  expect(response.body.data.gender).to.eq(newUser.AllUser.gender);\n  expect(response.body.data.email).to.eq(newUser.AllUser.email);\n  expect(response.body.data.status).to.eq(newUser.AllUser.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "f07ad186-7a64-4e24-a4fd-2dcdd7af6de8",
                  "parentUUID": "69b0aae3-f2a6-4ea4-8a2e-66e617d26cd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f07ad186-7a64-4e24-a4fd-2dcdd7af6de8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1633,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
              "title": "When i want to change only one thing from user",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return the user with only one change - Name",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Name",
                  "timedOut": null,
                  "duration": 408,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.name\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.name.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "069f7d64-595b-4a65-a912-d4ff0535c78f",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Gender",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Gender",
                  "timedOut": null,
                  "duration": 404,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.gender\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(newUser.gender.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "d5c180cd-f836-4b52-abb7-aa9f8a642e2c",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Email",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Email",
                  "timedOut": null,
                  "duration": 409,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.email\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(newUser.email.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "db141bfc-3677-4042-ac00-6871bf3ba71c",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Status",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Status",
                  "timedOut": null,
                  "duration": 418,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.status\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(newUser.status.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "610ceb3f-5634-4193-b304-db53df55eb7c",
                  "parentUUID": "5cd960c1-1d68-4584-9057-d6cbe1da3abf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "069f7d64-595b-4a65-a912-d4ff0535c78f",
                "d5c180cd-f836-4b52-abb7-aa9f8a642e2c",
                "db141bfc-3677-4042-ac00-6871bf3ba71c",
                "610ceb3f-5634-4193-b304-db53df55eb7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1639,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b54a791-73aa-4cad-91a7-271ea51f04a4",
              "title": "When i send only null values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error informing that all fields i sent could not me null",
                  "fullTitle": "Given User API When i send only null values Then it should return me an error informing that all fields i sent could not me null",
                  "timedOut": null,
                  "duration": 399,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "8f644937-a02b-4b22-aff1-3881b7f611b3",
                  "parentUUID": "8b54a791-73aa-4cad-91a7-271ea51f04a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f644937-a02b-4b22-aff1-3881b7f611b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 399,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
              "title": "When i sent null values in each field",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "timedOut": null,
                  "duration": 393,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullName,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n});",
                  "err": {},
                  "uuid": "713bbd0a-6518-4053-8c96-4b290c47b9ff",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "timedOut": null,
                  "duration": 396,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullEmail,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n});",
                  "err": {},
                  "uuid": "6f27da60-e3e0-456b-aa8c-a72592482c29",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 389,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullGender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"gender\");\n});",
                  "err": {},
                  "uuid": "e0a5761d-b999-48d8-9eac-f50078995466",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 387,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullStatus,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "f555c3c5-e2e7-48c5-8c63-54345cccbc4c",
                  "parentUUID": "3a7d7d04-b1a4-4dd0-b6f6-e5a4d42abe95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "713bbd0a-6518-4053-8c96-4b290c47b9ff",
                "6f27da60-e3e0-456b-aa8c-a72592482c29",
                "e0a5761d-b999-48d8-9eac-f50078995466",
                "f555c3c5-e2e7-48c5-8c63-54345cccbc4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1565,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f627489d-455a-4f32-a87c-643192ad2872",
      "title": "",
      "fullFile": "cypress/integration/Users/DELETEusers.js",
      "file": "cypress/integration/Users/DELETEusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0fb682f5-b04d-487c-a70d-d25ae013a27a",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6e5bf2db-395f-4c28-b53a-612a34b0e2e0",
              "title": "When I send DELETE /user passing an userID as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then the user should be deleted from the API",
                  "fullTitle": "Given User API When I send DELETE /user passing an userID as an URL param Then the user should be deleted from the API",
                  "timedOut": null,
                  "duration": 2519,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  expect(res.status).to.eq(204);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data).to.eq(undefined);\n});",
                  "err": {},
                  "uuid": "1f816890-8c81-40ed-95d7-c7d158f2dc68",
                  "parentUUID": "6e5bf2db-395f-4c28-b53a-612a34b0e2e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f816890-8c81-40ed-95d7-c7d158f2dc68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2519,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ad4547a-5121-4090-903b-b04d4febad4c",
              "title": "When I send DELETE /user without access token",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an auth error",
                  "fullTitle": "Given User API When I send DELETE /user without access token Then it should return an auth error",
                  "timedOut": null,
                  "duration": 352,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var accessToken = '';\ncy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ',\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(404);\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "8d34abac-9d24-4ce0-b971-ed8ffcf4c692",
                  "parentUUID": "4ad4547a-5121-4090-903b-b04d4febad4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d34abac-9d24-4ce0-b971-ed8ffcf4c692"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 352,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1d9a19d-e501-4747-be29-970e6011d8ca",
              "title": "When I send DELETE /user passing an userID that doesnt exist or was already deleted as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given User API When I send DELETE /user passing an userID that doesnt exist or was already deleted as an URL param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 349,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(404);\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "91d6030c-d38a-41e5-8b67-1d00751a0de4",
                  "parentUUID": "e1d9a19d-e501-4747-be29-970e6011d8ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91d6030c-d38a-41e5-8b67-1d00751a0de4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 349,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.0.1"
    }
  }
}