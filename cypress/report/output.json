{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-05T02:46:36.000Z",
    "end": "2022-01-05T02:47:04.884Z",
    "duration": 13852,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9a31fafa-c3c2-4008-a6cb-ef65daba8532",
      "title": "",
      "fullFile": "cypress/integration/Users/GETusers.js",
      "file": "cypress/integration/Users/GETusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d4c983d0-b4ff-4d88-a9bb-6ce159354d38",
          "title": "Given the Users api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f3c5b697-911e-4980-9e19-8e757c7a154d",
              "title": "When I Send Get /users",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return a list with 20 registered users",
                  "fullTitle": "Given the Users api When I Send Get /users Then it should return a list with 20 registered users",
                  "timedOut": null,
                  "duration": 1719,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'https://gorest.co.in/public/v1/users/',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(200);\n  expect(res.body.meta.pagination.limit).to.eq(res.body.data.length);\n  Cypress._.each(res.body.data, users => {\n    expect(users).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(users.id).to.be.a('number').and.not.be.null;\n    expect(users.email).to.not.be.null;\n    expect(users.gender).to.not.be.null;\n    expect(users.status).to.not.be.null;\n  });\n  var usuario = res.body.data[0];\n  cy.savingGetUser(usuario.id, usuario.name, usuario.email, usuario.gender, usuario.status); //expect(res.body.data[0].email).to.not.be.null;\n});",
                  "err": {},
                  "uuid": "96996f7b-ffe2-4b71-ada6-9f94804c235d",
                  "parentUUID": "f3c5b697-911e-4980-9e19-8e757c7a154d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96996f7b-ffe2-4b71-ada6-9f94804c235d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1719,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfbb0518-ef91-4794-a83f-689df7bf5ce2",
              "title": "When i send GET /users passing user id as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return only the filtered user",
                  "fullTitle": "Given the Users api When i send GET /users passing user id as an URL param Then it should return only the filtered user",
                  "timedOut": null,
                  "duration": 365,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {};\ncy.readFile('cypress/fixtures/GetUser/randomUserFromGET.json').then(User => {\n  user = User;\n  cy.request({\n    method: 'GET',\n    url: 'https://gorest.co.in/public/v1/users/' + user.id,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.eq(200);\n    cy.log(JSON.stringify(res.body));\n    expect(res.body.data).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(res.body.data).has.property('id', user.id);\n    expect(res.body.data).has.property('name', user.name);\n    expect(res.body.data).has.property('gender', user.gender);\n    expect(res.body.data).has.property('email', user.email);\n    expect(res.body.data).has.property('status', user.status);\n  });\n});",
                  "err": {},
                  "uuid": "539fa5be-ab24-4974-85cd-a46868ac3c76",
                  "parentUUID": "bfbb0518-ef91-4794-a83f-689df7bf5ce2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "539fa5be-ab24-4974-85cd-a46868ac3c76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 365,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f8ee023-b9b9-4edf-8b54-977c06cba863",
              "title": "When i send GET /user passing an userid that doesnt exists as an URL Param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given the Users api When i send GET /user passing an userid that doesnt exists as an URL Param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 337,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'get',\n  url: 'https://gorest.co.in/public/v1/users/0000',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "3cea219d-1260-4d3d-85f3-49e76e5101f1",
                  "parentUUID": "8f8ee023-b9b9-4edf-8b54-977c06cba863",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cea219d-1260-4d3d-85f3-49e76e5101f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 337,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4f41b88d-9397-4ac3-88fd-98d546a97451",
      "title": "",
      "fullFile": "cypress/integration/Users/POSTusers.js",
      "file": "cypress/integration/Users/POSTusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a90bddc-8c48-4f9e-915c-7ad1a79ceca3",
          "title": "Given the User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e58a69d-f2e5-4091-98e9-8a0cc250f69a",
              "title": "When I send POST /User with all fields ",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should create a new user",
                  "fullTitle": "Given the User API When I send POST /User with all fields  Then it should create a new user",
                  "timedOut": null,
                  "duration": 1212,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(201);\n  expect(response.body.data).has.property('name', user.AllUser.name);\n  expect(response.body.data).has.property('gender', user.AllUser.gender);\n  expect(response.body.data).has.property('email', user.AllUser.email);\n  expect(response.body.data).has.property('status', user.AllUser.status);\n  userId = response.body.data.id;\n});",
                  "err": {},
                  "uuid": "8edd3acc-efe2-4d4f-b64c-62d3d6bf6d3b",
                  "parentUUID": "0e58a69d-f2e5-4091-98e9-8a0cc250f69a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8edd3acc-efe2-4d4f-b64c-62d3d6bf6d3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1212,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5e37c30-efdb-4812-9104-e1d6896d3e9f",
              "title": "When I send POST /User sending only one field ",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "(Name) - Then it should return a message informing that EMAIL, GENDER AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Name) - Then it should return a message informing that EMAIL, GENDER AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 383,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.name,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"gender\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "61e84615-e95e-49b8-aac1-065305f6d5c3",
                  "parentUUID": "a5e37c30-efdb-4812-9104-e1d6896d3e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Email) - Then it should return a message informing that NAME, GENDER AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Email) - Then it should return a message informing that NAME, GENDER AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 380,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.email,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"gender\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "b8a4d8ab-ad64-4d4a-9850-9fb66cb679e4",
                  "parentUUID": "a5e37c30-efdb-4812-9104-e1d6896d3e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Gender) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Gender) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 378,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.gender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "0690e2a8-a169-40f5-beb2-5f1c551e1319",
                  "parentUUID": "a5e37c30-efdb-4812-9104-e1d6896d3e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Status) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Status) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 377,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.status,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "1c1e12c1-a480-4999-97e3-05dc9e36f50a",
                  "parentUUID": "a5e37c30-efdb-4812-9104-e1d6896d3e9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61e84615-e95e-49b8-aac1-065305f6d5c3",
                "b8a4d8ab-ad64-4d4a-9850-9fb66cb679e4",
                "0690e2a8-a169-40f5-beb2-5f1c551e1319",
                "1c1e12c1-a480-4999-97e3-05dc9e36f50a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1518,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0b9a5d6-3c26-4902-9c76-eabdbce50ee7",
              "title": "When I send POST /User with null fields",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error 422 informing that each field must be not null",
                  "fullTitle": "Given the User API When I send POST /User with null fields Then it should return me an error 422 informing that each field must be not null",
                  "timedOut": null,
                  "duration": 372,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "2e4de583-de65-400f-a1ed-39d3fd539694",
                  "parentUUID": "d0b9a5d6-3c26-4902-9c76-eabdbce50ee7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e4de583-de65-400f-a1ed-39d3fd539694"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 372,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21da08c6-bcc3-4f8d-8c80-9dd0a3cabefd",
              "title": "When I send POST /User without accessToken",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an auth error",
                  "fullTitle": "Given the User API When I send POST /User without accessToken Then it should return an auth error",
                  "timedOut": null,
                  "duration": 356,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ',\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: {},\n  //Preciso declarar isso para que não pare o teste caso dê erro\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(401);\n  expect(response.body.data.message).to.eq('Authentication failed');\n});",
                  "err": {},
                  "uuid": "e611fcba-894a-4a99-9c29-0b272c49fe26",
                  "parentUUID": "21da08c6-bcc3-4f8d-8c80-9dd0a3cabefd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e611fcba-894a-4a99-9c29-0b272c49fe26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 356,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fd83face-c894-4679-828a-a0d15b0a559e",
      "title": "",
      "fullFile": "cypress/integration/Users/UPDATEuser.js",
      "file": "cypress/integration/Users/UPDATEuser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c10a42d1-e555-4d37-9a11-f298bbbe34a4",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6f86d6e2-796f-486a-be26-306b7559a71f",
              "title": "When I already have an user and want to update it all",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "fullTitle": "Given User API When I already have an user and want to update it all Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "timedOut": null,
                  "duration": 1618,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.AllUser.name);\n  expect(response.body.data.gender).to.eq(newUser.AllUser.gender);\n  expect(response.body.data.email).to.eq(newUser.AllUser.email);\n  expect(response.body.data.status).to.eq(newUser.AllUser.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "3c03c48b-1259-46a0-ae94-2e9b4d21e52b",
                  "parentUUID": "6f86d6e2-796f-486a-be26-306b7559a71f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c03c48b-1259-46a0-ae94-2e9b4d21e52b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1618,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3cc73a4-0953-4141-8b96-83d9251f0761",
              "title": "When i want to change only one thing from user",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return the user with only one change - Name",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Name",
                  "timedOut": null,
                  "duration": 395,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.name\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.name.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "7eef6904-d7e2-4e91-967b-d43662b4e9ba",
                  "parentUUID": "b3cc73a4-0953-4141-8b96-83d9251f0761",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Gender",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Gender",
                  "timedOut": null,
                  "duration": 385,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.gender\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(newUser.gender.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "90211b3d-32ff-41de-8ead-10093cfba600",
                  "parentUUID": "b3cc73a4-0953-4141-8b96-83d9251f0761",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Email",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Email",
                  "timedOut": null,
                  "duration": 389,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.email\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(newUser.email.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "87b46250-2806-4465-9c10-14b1735fe148",
                  "parentUUID": "b3cc73a4-0953-4141-8b96-83d9251f0761",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Status",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Status",
                  "timedOut": null,
                  "duration": 384,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.status\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(newUser.status.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "182e1cdb-6574-4fc6-bfd8-2fd5a1b007ab",
                  "parentUUID": "b3cc73a4-0953-4141-8b96-83d9251f0761",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7eef6904-d7e2-4e91-967b-d43662b4e9ba",
                "90211b3d-32ff-41de-8ead-10093cfba600",
                "87b46250-2806-4465-9c10-14b1735fe148",
                "182e1cdb-6574-4fc6-bfd8-2fd5a1b007ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1553,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e81d77dd-2b55-4089-9e47-506bbe0a7c33",
              "title": "When i send only null values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error informing that all fields i sent could not me null",
                  "fullTitle": "Given User API When i send only null values Then it should return me an error informing that all fields i sent could not me null",
                  "timedOut": null,
                  "duration": 400,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "2918c9a6-ccc7-4991-ba49-80de166efa69",
                  "parentUUID": "e81d77dd-2b55-4089-9e47-506bbe0a7c33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2918c9a6-ccc7-4991-ba49-80de166efa69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 400,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "820e145b-2085-41ba-a7c5-ead3628ad94c",
              "title": "When i sent null values in each field",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "timedOut": null,
                  "duration": 383,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullName,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n});",
                  "err": {},
                  "uuid": "4f9b34ae-16cf-4b1a-ae2a-406bd93ba33c",
                  "parentUUID": "820e145b-2085-41ba-a7c5-ead3628ad94c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "timedOut": null,
                  "duration": 384,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullEmail,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n});",
                  "err": {},
                  "uuid": "b20b0f3b-836e-4fea-aecf-1fb6aea4111b",
                  "parentUUID": "820e145b-2085-41ba-a7c5-ead3628ad94c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 379,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullGender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"gender\");\n});",
                  "err": {},
                  "uuid": "06f758db-00d6-4d8a-9fe8-7c365dbc9e2d",
                  "parentUUID": "820e145b-2085-41ba-a7c5-ead3628ad94c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 376,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullStatus,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "99055e4f-b069-4d4a-af2c-dd2419d6581c",
                  "parentUUID": "820e145b-2085-41ba-a7c5-ead3628ad94c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f9b34ae-16cf-4b1a-ae2a-406bd93ba33c",
                "b20b0f3b-836e-4fea-aecf-1fb6aea4111b",
                "06f758db-00d6-4d8a-9fe8-7c365dbc9e2d",
                "99055e4f-b069-4d4a-af2c-dd2419d6581c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1522,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d3a0735c-c733-446f-beb1-e9d8491b60eb",
      "title": "",
      "fullFile": "cypress/integration/Users/DELETEusers.js",
      "file": "cypress/integration/Users/DELETEusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51ac5915-07bd-428b-97f3-a3572738ace1",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "52bae3a1-ab30-41fc-bceb-b88430f07bba",
              "title": "When I send DELETE /user passing an userID as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then the user should be deleted from the API",
                  "fullTitle": "Given User API When I send DELETE /user passing an userID as an URL param Then the user should be deleted from the API",
                  "timedOut": null,
                  "duration": 2180,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  expect(res.status).to.eq(204);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data).to.eq(undefined);\n});",
                  "err": {},
                  "uuid": "0077d9d5-8b90-432f-bad1-00ec08e7e8a7",
                  "parentUUID": "52bae3a1-ab30-41fc-bceb-b88430f07bba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0077d9d5-8b90-432f-bad1-00ec08e7e8a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2180,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99891489-2bbe-49df-bf44-9062ac014408",
              "title": "When I send DELETE /user without access token",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an auth error",
                  "fullTitle": "Given User API When I send DELETE /user without access token Then it should return an auth error",
                  "timedOut": null,
                  "duration": 352,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var accessToken = '';\ncy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ',\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(404);\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "b28f6bfc-c82b-4a18-8225-203375d20095",
                  "parentUUID": "99891489-2bbe-49df-bf44-9062ac014408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b28f6bfc-c82b-4a18-8225-203375d20095"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 352,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23c47894-17c0-4780-99ce-c09abafe21bc",
              "title": "When I send DELETE /user passing an userID that doesnt exist or was already deleted as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given User API When I send DELETE /user passing an userID that doesnt exist or was already deleted as an URL param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 348,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(404);\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "64547d17-cd15-4bc8-8426-7ff147cbbff6",
                  "parentUUID": "23c47894-17c0-4780-99ce-c09abafe21bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64547d17-cd15-4bc8-8426-7ff147cbbff6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.0.1"
    }
  }
}