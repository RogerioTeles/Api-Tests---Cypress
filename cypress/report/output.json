{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-06T02:01:59.761Z",
    "end": "2022-01-06T02:02:42.619Z",
    "duration": 18051,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bdf93d4a-e073-40f1-915b-ef8b73875e3f",
      "title": "",
      "fullFile": "cypress/integration/Users/GETusers.js",
      "file": "cypress/integration/Users/GETusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "28688d82-292d-490b-82e9-80e99acc1b2c",
          "title": "Given the Users api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be582070-92f4-4651-84ea-2a4871d97349",
              "title": "When I Send Get /users",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return a list with 20 registered users",
                  "fullTitle": "Given the Users api When I Send Get /users Then it should return a list with 20 registered users",
                  "timedOut": null,
                  "duration": 2423,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'https://gorest.co.in/public/v1/users/',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(200);\n  expect(res.body.meta.pagination.limit).to.eq(res.body.data.length);\n  Cypress._.each(res.body.data, users => {\n    expect(users).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(users.id).to.be.a('number').and.not.be.null;\n    expect(users.email).to.not.be.null;\n    expect(users.gender).to.not.be.null;\n    expect(users.status).to.not.be.null;\n  });\n  var usuario = res.body.data[0];\n  cy.savingGetUser(usuario.id, usuario.name, usuario.email, usuario.gender, usuario.status); //expect(res.body.data[0].email).to.not.be.null;\n});",
                  "err": {},
                  "uuid": "9f35d847-d769-4b82-a030-6d71b8168b87",
                  "parentUUID": "be582070-92f4-4651-84ea-2a4871d97349",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f35d847-d769-4b82-a030-6d71b8168b87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2423,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "becd9d6a-e79f-46d3-9356-70b06784bf83",
              "title": "When i send GET /users passing user id as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return only the filtered user",
                  "fullTitle": "Given the Users api When i send GET /users passing user id as an URL param Then it should return only the filtered user",
                  "timedOut": null,
                  "duration": 475,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {};\ncy.readFile('cypress/fixtures/GetUser/randomUserFromGET.json').then(User => {\n  user = User;\n  cy.request({\n    method: 'GET',\n    url: 'https://gorest.co.in/public/v1/users/' + user.id,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    expect(res.status).to.eq(200);\n    cy.log(JSON.stringify(res.body));\n    expect(res.body.data).to.have.all.keys('id', 'name', 'email', 'gender', 'status');\n    expect(res.body.data).has.property('id', user.id);\n    expect(res.body.data).has.property('name', user.name);\n    expect(res.body.data).has.property('gender', user.gender);\n    expect(res.body.data).has.property('email', user.email);\n    expect(res.body.data).has.property('status', user.status);\n  });\n});",
                  "err": {},
                  "uuid": "c140356f-3da6-4236-a39e-081f5cb525da",
                  "parentUUID": "becd9d6a-e79f-46d3-9356-70b06784bf83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c140356f-3da6-4236-a39e-081f5cb525da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 475,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58f645c7-1aba-4691-b81b-36d9571f07ed",
              "title": "When i send GET /user passing an userid that doesnt exists as an URL Param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given the Users api When i send GET /user passing an userid that doesnt exists as an URL Param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 391,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'get',\n  url: 'https://gorest.co.in/public/v1/users/0000',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.eq(404);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "d5b0ba30-d661-4460-aceb-6788728de261",
                  "parentUUID": "58f645c7-1aba-4691-b81b-36d9571f07ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5b0ba30-d661-4460-aceb-6788728de261"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 391,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a551b02b-1d4b-419b-9ae8-9f1be567ffb0",
      "title": "",
      "fullFile": "cypress/integration/Users/POSTusers.js",
      "file": "cypress/integration/Users/POSTusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3a1d959e-cd3b-48fd-bbde-de8af362dc79",
          "title": "Given the User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c25f6b9c-1ff1-4139-bbcf-9de30e7ada71",
              "title": "When I send POST /User with all fields ",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should create a new user",
                  "fullTitle": "Given the User API When I send POST /User with all fields  Then it should create a new user",
                  "timedOut": null,
                  "duration": 1289,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(201);\n  expect(response.body.data).has.property('name', user.AllUser.name);\n  expect(response.body.data).has.property('gender', user.AllUser.gender);\n  expect(response.body.data).has.property('email', user.AllUser.email);\n  expect(response.body.data).has.property('status', user.AllUser.status);\n  userId = response.body.data.id;\n});",
                  "err": {},
                  "uuid": "05c989c3-5264-4efa-ba5a-684e522330af",
                  "parentUUID": "c25f6b9c-1ff1-4139-bbcf-9de30e7ada71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05c989c3-5264-4efa-ba5a-684e522330af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1289,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fc65caf-59ea-47d6-a801-b83bdde82093",
              "title": "When I send POST /User sending only one field ",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "(Name) - Then it should return a message informing that EMAIL, GENDER AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Name) - Then it should return a message informing that EMAIL, GENDER AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 505,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.name,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"gender\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "ac1e4ff6-7eb8-4a8e-a1fb-b54974c3cdf9",
                  "parentUUID": "4fc65caf-59ea-47d6-a801-b83bdde82093",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Email) - Then it should return a message informing that NAME, GENDER AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Email) - Then it should return a message informing that NAME, GENDER AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 409,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.email,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"gender\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "7abe69c3-1521-43a1-a499-c55cc9fcc2f1",
                  "parentUUID": "4fc65caf-59ea-47d6-a801-b83bdde82093",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Gender) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Gender) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 407,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.gender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "429a1e33-e059-4ccd-b5d0-79ae9eb7cfdc",
                  "parentUUID": "4fc65caf-59ea-47d6-a801-b83bdde82093",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "(Status) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "fullTitle": "Given the User API When I send POST /User sending only one field  (Status) - Then it should return a message informing that NAME, EMAIL AND STATUS cannot be blank",
                  "timedOut": null,
                  "duration": 393,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.status,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "b4295884-7a3e-4b69-b77d-f3f06ba54dc6",
                  "parentUUID": "4fc65caf-59ea-47d6-a801-b83bdde82093",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac1e4ff6-7eb8-4a8e-a1fb-b54974c3cdf9",
                "7abe69c3-1521-43a1-a499-c55cc9fcc2f1",
                "429a1e33-e059-4ccd-b5d0-79ae9eb7cfdc",
                "b4295884-7a3e-4b69-b77d-f3f06ba54dc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1714,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84bfe917-ff26-472a-bb9f-c63e74940aec",
              "title": "When I send POST /User with null fields",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error 422 informing that each field must be not null",
                  "fullTitle": "Given the User API When I send POST /User with null fields Then it should return me an error 422 informing that each field must be not null",
                  "timedOut": null,
                  "duration": 403,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: user.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\"); //userId = res.body.data.id;\n});",
                  "err": {},
                  "uuid": "161b5e0b-eda6-4f22-954b-91b8387af845",
                  "parentUUID": "84bfe917-ff26-472a-bb9f-c63e74940aec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "161b5e0b-eda6-4f22-954b-91b8387af845"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 403,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d194333a-9307-483d-9567-d5d0db091b05",
              "title": "When I send POST /User without accessToken",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an auth error",
                  "fullTitle": "Given the User API When I send POST /User without accessToken Then it should return an auth error",
                  "timedOut": null,
                  "duration": 401,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'post',\n  url: 'https://gorest.co.in/public/v1/users',\n  headers: {\n    'Authorization': 'Bearer ',\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: {},\n  //Preciso declarar isso para que não pare o teste caso dê erro\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(401);\n  expect(response.body.data.message).to.eq('Authentication failed');\n});",
                  "err": {},
                  "uuid": "68c62023-e42a-4b62-bbf1-ed1ce221ac76",
                  "parentUUID": "d194333a-9307-483d-9567-d5d0db091b05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68c62023-e42a-4b62-bbf1-ed1ce221ac76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 401,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "da5b6f61-e725-4927-b4de-ce77d6272ed1",
      "title": "",
      "fullFile": "cypress/integration/Users/UPDATEuser.js",
      "file": "cypress/integration/Users/UPDATEuser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "644d3960-f1ef-4e36-85bb-49f3cce02ecb",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "80e3babc-dcbc-4fa9-90ec-0ff9f55b4c29",
              "title": "When I already have an user and want to update it all",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "fullTitle": "Given User API When I already have an user and want to update it all Then it must have to return me 200 and the updated user s information with the same ID i sent de request.",
                  "timedOut": null,
                  "duration": 2552,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.AllUser\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.AllUser.name);\n  expect(response.body.data.gender).to.eq(newUser.AllUser.gender);\n  expect(response.body.data.email).to.eq(newUser.AllUser.email);\n  expect(response.body.data.status).to.eq(newUser.AllUser.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "7d21c9fa-ba00-4f43-a189-896386dda27a",
                  "parentUUID": "80e3babc-dcbc-4fa9-90ec-0ff9f55b4c29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d21c9fa-ba00-4f43-a189-896386dda27a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2552,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
              "title": "When i want to change only one thing from user",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return the user with only one change - Name",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Name",
                  "timedOut": null,
                  "duration": 540,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.name\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(newUser.name.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "b932648e-8d6c-46c3-9115-70915e6924e4",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Gender",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Gender",
                  "timedOut": null,
                  "duration": 513,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.gender\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(newUser.gender.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "000359ec-0467-4d6b-8583-6a3c8379e6be",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Email",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Email",
                  "timedOut": null,
                  "duration": 505,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.email\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(newUser.email.email);\n  expect(response.body.data.status).to.eq(userToBeUpdated.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "be716006-f337-4ba4-9101-56b9c1ad0ee3",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it should return the user with only one change - Status",
                  "fullTitle": "Given User API When i want to change only one thing from user Then it should return the user with only one change - Status",
                  "timedOut": null,
                  "duration": 621,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.status\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(userToBeUpdated.id);\n  expect(response.body.data.name).to.eq(userToBeUpdated.name);\n  expect(response.body.data.gender).to.eq(userToBeUpdated.gender);\n  expect(response.body.data.email).to.eq(userToBeUpdated.email);\n  expect(response.body.data.status).to.eq(newUser.status.status);\n  var user = response.body.data;\n  cy.savingPostUser(userToBeUpdated.id, user.name, user.email, user.gender, user.status, 'update');\n});",
                  "err": {},
                  "uuid": "50047780-186d-4810-86cc-d81d42754f31",
                  "parentUUID": "18a5d32c-70de-4bd1-bca1-e0af0dd1a533",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b932648e-8d6c-46c3-9115-70915e6924e4",
                "000359ec-0467-4d6b-8583-6a3c8379e6be",
                "be716006-f337-4ba4-9101-56b9c1ad0ee3",
                "50047780-186d-4810-86cc-d81d42754f31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2179,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d05cfcce-4d98-4e6d-8e83-efc2fd246d2b",
              "title": "When i send only null values",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return me an error informing that all fields i sent could not me null",
                  "fullTitle": "Given User API When i send only null values Then it should return me an error informing that all fields i sent could not me null",
                  "timedOut": null,
                  "duration": 567,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullValues,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n  expect(response.body.data[1].message).be.eq(\"can't be blank\");\n  expect(response.body.data[1].field).be.eq(\"name\");\n  expect(response.body.data[2].message).be.eq(\"can't be blank\");\n  expect(response.body.data[2].field).be.eq(\"gender\");\n  expect(response.body.data[3].message).be.eq(\"can't be blank\");\n  expect(response.body.data[3].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "cc6f6674-ac0b-42fc-86a4-d666e7ac9cde",
                  "parentUUID": "d05cfcce-4d98-4e6d-8e83-efc2fd246d2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc6f6674-ac0b-42fc-86a4-d666e7ac9cde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 567,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2130d549-e47e-453d-99ae-c9a5657c75c1",
              "title": "When i sent null values in each field",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Name",
                  "timedOut": null,
                  "duration": 481,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullName,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"name\");\n});",
                  "err": {},
                  "uuid": "6a447bc1-e1a7-4fae-aa63-fc2e64b4ca0f",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Email",
                  "timedOut": null,
                  "duration": 425,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullEmail,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"email\");\n});",
                  "err": {},
                  "uuid": "287083da-0065-49e3-9e9c-b6e450a03a89",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 446,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullGender,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"gender\");\n});",
                  "err": {},
                  "uuid": "157189d6-7b16-4dad-9034-960b19f596a1",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "fullTitle": "Given User API When i sent null values in each field Then it shoud return me an error where shows that the field i sent could not be null - Gender",
                  "timedOut": null,
                  "duration": 418,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'patch',\n  url: 'https://gorest.co.in/public/v1/users/' + userToBeUpdated.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: newUser.nullStatus,\n  failOnStatusCode: false\n}).then(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).be.eq(422);\n  expect(response.body.data[0].message).be.eq(\"can't be blank\");\n  expect(response.body.data[0].field).be.eq(\"status\");\n});",
                  "err": {},
                  "uuid": "b9075391-291e-47d7-b9d4-95e95bc2e32c",
                  "parentUUID": "2130d549-e47e-453d-99ae-c9a5657c75c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a447bc1-e1a7-4fae-aa63-fc2e64b4ca0f",
                "287083da-0065-49e3-9e9c-b6e450a03a89",
                "157189d6-7b16-4dad-9034-960b19f596a1",
                "b9075391-291e-47d7-b9d4-95e95bc2e32c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1770,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9c842727-06d7-479a-94e3-344ade2267af",
      "title": "",
      "fullFile": "cypress/integration/Users/DELETEusers.js",
      "file": "cypress/integration/Users/DELETEusers.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "309d71c2-a1be-4b47-af35-8908549f68ac",
          "title": "Given User API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4accdf49-4f71-4efd-ac5f-f8439b398db0",
              "title": "When I send DELETE /user passing an userID as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then the user should be deleted from the API",
                  "fullTitle": "Given User API When I send DELETE /user passing an userID as an URL param Then the user should be deleted from the API",
                  "timedOut": null,
                  "duration": 3026,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}).then(res => {\n  expect(res.status).to.eq(204);\n  cy.log(JSON.stringify(res.body));\n  expect(res.body.data).to.eq(undefined);\n});",
                  "err": {},
                  "uuid": "773eecf5-0002-4195-9598-8ebabec9018f",
                  "parentUUID": "4accdf49-4f71-4efd-ac5f-f8439b398db0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "773eecf5-0002-4195-9598-8ebabec9018f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3026,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3483bd6e-212b-4128-b875-3dea940a74c5",
              "title": "When I send DELETE /user without access token",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an auth error",
                  "fullTitle": "Given User API When I send DELETE /user without access token Then it should return an auth error",
                  "timedOut": null,
                  "duration": 459,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var accessToken = '';\ncy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ',\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(404);\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "d52cd561-97d8-4073-ab0b-7a2e649ee823",
                  "parentUUID": "3483bd6e-212b-4128-b875-3dea940a74c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d52cd561-97d8-4073-ab0b-7a2e649ee823"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 459,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75e56bfa-cc26-496d-b9a4-ab685f7c5152",
              "title": "When I send DELETE /user passing an userID that doesnt exist or was already deleted as an URL param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return an message informing that the user was not found",
                  "fullTitle": "Given User API When I send DELETE /user passing an userID that doesnt exist or was already deleted as an URL param Then it should return an message informing that the user was not found",
                  "timedOut": null,
                  "duration": 402,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'delete',\n  url: 'https://gorest.co.in/public/v1/users/' + userToDelete.id,\n  headers: {\n    'Authorization': 'Bearer ' + Cypress.env('accessToken'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  expect(res.status).to.eq(404);\n  expect(res.body.data.message).to.eq('Resource not found');\n});",
                  "err": {},
                  "uuid": "5184af3b-2953-4513-b02c-9d016c6e3167",
                  "parentUUID": "75e56bfa-cc26-496d-b9a4-ab685f7c5152",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5184af3b-2953-4513-b02c-9d016c6e3167"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 402,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.0.1"
    }
  }
}